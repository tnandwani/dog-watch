// <View style = {{flex: 1, justifyContent: 'center' }}>
// <TextInput
//         placeholder="Dog Name"
//         onChangeText={(dogName) => this.setState({ dogName })}
//     />
//     <TextInput
//         placeholder="Email"
//         onChangeText={(email) => this.setState({ email })}
//     />
//     <TextInput
//         placeholder="Password"
//         secureTextEntry={true}
//         onChangeText={(password) => this.setState({ password })}
//     />


//     <Button
//         title="Next Step"
//         onPress={() => this.onSignUp()}
//     />

// </View>





// import React, { useState } from 'react'
// import {
//     Box,
//     Text,
//     Heading,
//     VStack,
//     FormControl,
//     Input,
//     Link,
//     Button,
//     HStack
//   } from 'native-base';

// import firebase from 'firebase'

// export default class Login extends Component {

//     constructor(props) {

//         super(props)

//         this.state = {
//             email: '',
//             password: '',
//             dogName: '',
//             alert: 'Must be atleast 6 characters.'
//         }

//         this.onSignIn = this.onSignIn.bind(this);
//     }

//     onSignIn() {
//       console.log('signing in');
//         const { email, password } = this.state;
//         firebase.auth().signInWithEmailAndPassword(email, password)
//             .then((result) => {
//                 console.log(result)
//             })
//             .catch((error) => {
//               console.log(error.message)

//                 this.setState({
//                   alert: error.message
//                 })
//             })

//     }

//     render() {

//         return (

//             <Box safeArea flex={1} p="2" py="8" w="90%" mx="auto">
//             <Heading size="lg" fontWeight="600" color="coolGray.800">
//               Welcome Back
//             </Heading>
//             <Heading mt="1" color="coolGray.600" fontWeight="medium" size="xs">
//               Sign in to continue!
//             </Heading>

//             <VStack space={3} mt="5">
//               <FormControl>
//                 <FormControl.Label
//                   _text={{
//                     color: 'coolGray.800',
//                     fontSize: 'xs',
//                     fontWeight: 500,
//                   }}>
//                   Email ID
//                 </FormControl.Label>
//                 <Input type = 'email' onChangeText={(email) => this.setState({ email })}/>
//               </FormControl>
//               <FormControl>
//                 <FormControl.Label
//                   _text={{
//                     color: 'coolGray.800',
//                     fontSize: 'xs',
//                     fontWeight: 500,
//                   }}>
//                   Password
//                 </FormControl.Label> 
//                 <Input type="password" onChangeText={(password) => this.setState({ password })}/>
//                 <FormControl.HelperText>
//             {this.state.alert}
//           </FormControl.HelperText>
//                 {/* <Link
//                   _text={{ fontSize: 'xs', fontWeight: '500', color: 'indigo.500' }}
//                   alignSelf="flex-end"
//                   mt="1">
//                   Forget Password?
//                 </Link> */}
//               </FormControl>
//               <Button mt="2" colorScheme="indigo"  onPress={() => this.onSignIn()}>
//                 Sign in
//               </Button>
//               <Button mt="2" variant = "outline"colorScheme="indigo"  onPress= {() => this.props.navigation.goBack()}>
//                 Back
//               </Button>
//               <HStack mt="6" justifyContent="center">
//                 <Text fontSize="sm" color="muted.700" fontWeight={400}>
//                   I'm a new user.{' '}
//                 </Text>
//                 <Link
//                   _text={{
//                     color: 'indigo.500',
//                     fontWeight: 'medium',
//                     fontSize: 'sm',
//                   }}
//                   onPress= {() => this.props.navigation.navigate("Register")}>
//                   Sign Up
//                 </Link>
//               </HStack>
//             </VStack>
//           </Box>

//         )
//     }
// }





/// create firebase user


(async () => {

    // AW

    // firebase.auth().createUserWithEmailAndPassword(email, password)
    //         .then((userCredential) => {
    //             // Signed in 
    //             console.log('welcome user')

    //             var user = userCredential.user;
    //             console.log(user)

    //             createUserDoc(user.uid, user.email);
    //             console.log('sent dog doc')


    //         })
    //         .catch((error) => {
    //             var errorMessage = error.message;
    //             setAlert(errorMessage);
    //         });
})();



firebase.auth().onAuthStateChanged((user) => {
    if (!user) {
        // no user

    } else {
        // user here
        console.log("welcome back " + user.email)
        const email = user.email
        const uid = user.uid
        dispatch(saveUserAccount({
            email,
            uid
        }))

    }
});






function publish() {
    uploadTask.then((response) => {
        console.log("task response:", response)
        const urlp = response.ref.getDownloadURL()
        let PURI = await urlp;
        console.log("URI is"); // Success
        console.log(PURI); // avatar URL 

        const dogData = {
            dogName: dogName,
            photo: PURI,
            breed: breed,
            age: age,
            gender: gender,
            contact: contact,
            visibility: visibility,
            zone: location.address,
            coords: location.coords,
            owner: uid
        }
        // upload dogObject

        let dogPromise = createDog(dogData);

        dogPromise.then((response) => {
            console.log("response:", response)
            console.log(response); // Success
            let duid = response.id

            // add dog to list
            let updatePromise = addDogtoUser(duid, uid, PURI);

            updatePromise.then(function (response) {
                console.log("response:", response)

                // finished adding dog

                window.location.reload();

            }, function (error) {
                console.log(error); // Failure
            });




        }, function (error) {
            console.log(error); // Failure
        });


    }, function (error) {
        console.log(error); // Failure
    });


}


export async function oldPublish(imageURI, navigation) {

    // convert to Blob
    const blob = await new Promise((resolve, reject) => {
        const xhr = new XMLHttpRequest();
        xhr.onload = function () {
            resolve(xhr.response);
        };
        xhr.onerror = function (e) {
            reject(new TypeError("Network request failed"));
        };
        xhr.responseType = "blob";
        xhr.open("GET", imageURI, true);
        xhr.send(null);
    });

    // get user uid
    const uid = store.getState().user.uid
    store.dispatch(saveOwner(uid))

    // get rawDog state
    const rawDog = store.getState().rawDog

    // upload rawDog
    console.log("STARTING TO CREATE DOG", rawDog)



    // Add a new document with a generated id.


    try {
        addDoc(collection(db, "dogs"), rawDog).then((docRef) => { // get duid
            const duid = docRef.id
            console.log("Created dog with duid: ", duid);


            // add duid to user dog list 
            store.dispatch(addDogtoUser(rawDog))

            // get new list 
            const newList = store.getState().user.dogs

            // post new dog list + update coords
            const userRef = doc(db, "users", uid);
            updateDoc(userRef, {
                dogs: newList,
                zone: rawDog.zone,
                longitude: rawDog.longitude,
                latitude: rawDog.latitude,

            }).then(() => {
                // update file
                const storageRef = ref(storage, 'profileImages/' + duid + '.jpg');
                // 'file' comes from the Blob or File API
                uploadBytes(storageRef, blob).then((snapshot) => {
                    console.log('Uploaded a blob or file!');

                    getDownloadURL(snapshot.ref).then((PURI) => {
                        console.log('File available at', PURI);
                        // add profileURL to rawDOG document

                        const dogRef = doc(db, "dogs", duid);
                        updateDoc(dogRef, {
                            profileImage: PURI,
                            duid: duid
                        }).then(() => {
                                console.log("added dog URL");
                                navigation.navigate('Profile');

                            }

                        );

                    });
                }).catch((error) => {
                    console.log(error)
                })
            })
        })



    } catch (e) {
        console.error("Error adding document: ", e);
    }


}


export async function compressImage(imageURI) {

    // convert to convas
    const img = new Image();
    img.src = blob;
    img.onload = function (ev) {
        window.URL.revokeObjectURL(blob); // release memory
        // Use the img
        const canvas = document.createElement('canvas');
        canvas.width = 500;
        canvas.height = 500;

        const ctx = canvas.getContext('2d');
        ctx.drawImage(img, 0, 0, 500, 500);

        // compress
        canvas.toBlob(function (cblob) {
            // Handle the compressed image
            console.log("blob", blob)
            console.log("c blob", cblob)

            return cblob
        }, 'image/jpeg', 0.8);

    };

}
